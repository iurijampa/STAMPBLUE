import { Express, Request, Response } from 'express';
import { storage } from './emergency-storage';

export function configurarRotasReimpressao(app: Express) {
  app.post('/api/reimpressao-emergencial/solicitar', async (req, res) => {
    try {
      const solicitacao = req.body;
      // Verificando campos obrigat√≥rios
      if (!solicitacao.activityId || !solicitacao.requestedBy || !solicitacao.reason || !solicitacao.quantity || !solicitacao.fromDepartment || !solicitacao.toDepartment) {
        return res.status(400).json({ error: 'Campos obrigat√≥rios ausentes' });
      }

      // Adicionando a solicita√ß√£o
      const novaSolicitacao = await storage.criarSolicitacaoReimpressao(solicitacao);
      res.status(201).json(novaSolicitacao);
    } catch (error) {
      console.error('Erro ao criar solicita√ß√£o de reimpress√£o:', error);
      res.status(500).json({ error: 'Erro ao criar solicita√ß√£o de reimpress√£o' });
    }
  });

  app.get('/api/reimpressao-emergencial/listar', async (req, res) => {
    console.log('üí° Requisi√ß√£o para listar solicita√ß√µes emergenciais');
    try {
      const departamento = req.query.departamento as string;
      const solicitacoes = await storage.listarSolicitacoesReimpressao(departamento);
      res.json(solicitacoes);
    } catch (error) {
      console.error('Erro ao listar solicita√ß√µes de reimpress√£o:', error);
      res.status(500).json({ error: 'Erro ao listar solicita√ß√µes de reimpress√£o' });
    }
  });

  app.post('/api/reimpressao-emergencial/atualizar-status', async (req, res) => {
    try {
      const { requestId, newStatus, completedBy, notes } = req.body;
      
      if (!requestId || !newStatus || !completedBy) {
        return res.status(400).json({ error: 'Campos obrigat√≥rios ausentes' });
      }

      const atualizada = await storage.atualizarStatusSolicitacao(requestId, newStatus, completedBy, notes);
      
      if (!atualizada) {
        return res.status(404).json({ error: 'Solicita√ß√£o n√£o encontrada' });
      }
      
      res.json({ success: true, message: 'Status atualizado com sucesso' });
    } catch (error) {
      console.error('Erro ao atualizar status da solicita√ß√£o:', error);
      res.status(500).json({ error: 'Erro ao atualizar status da solicita√ß√£o' });
    }
  });

  // Adicionar rota para cancelamento
  app.post('/api/reimpressao-emergencial/cancelar', async (req, res) => {
    try {
      const { requestId, canceledBy } = req.body;
      
      if (!requestId || !canceledBy) {
        return res.status(400).json({ error: 'ID da solicita√ß√£o e nome do respons√°vel s√£o obrigat√≥rios' });
      }

      // Verificar se a solicita√ß√£o existe
      const solicitacao = await storage.buscarSolicitacaoPorId(requestId);
      if (!solicitacao) {
        return res.status(404).json({ error: 'Solicita√ß√£o n√£o encontrada' });
      }

      // Verificar se o status atual permite cancelamento
      if (solicitacao.status === 'completed' || solicitacao.status === 'rejected' || 
          solicitacao.status === 'concluida' || solicitacao.status === 'rejeitada' ||
          solicitacao.status === 'cancelada') {
        return res.status(400).json({ 
          error: 'N√£o √© poss√≠vel cancelar uma solicita√ß√£o que j√° foi completada, rejeitada ou cancelada' 
        });
      }

      // Cancelar a solicita√ß√£o
      const cancelada = await storage.cancelarSolicitacao(requestId, canceledBy);
      
      res.json({ 
        success: true, 
        message: 'Solicita√ß√£o cancelada com sucesso',
        data: cancelada
      });
    } catch (error) {
      console.error('Erro ao cancelar solicita√ß√£o:', error);
      res.status(500).json({ 
        error: 'Erro ao cancelar solicita√ß√£o',
        details: error instanceof Error ? error.message : 'Erro desconhecido'
      });
    }
  });
}
